generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  status       String    @default("pending")     // pending, in_progress, completed, canceled, ...
  priority     String    @default("medium")      // low, medium, high, urgent
  progress     Int       @default(0)             // 0-100 (%)
  startTime    DateTime?                         // thời gian bắt đầu
  endTime      DateTime?                         // thời gian kết thúc
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tags         String[]                          // nhãn (labels)
}

model Auth {
  id        String   @id @map("_id")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  balance   Int        // số dư còn lại
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  transactions Transaction[]
}

model Transaction {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  description String           // mô tả user
  amount      Int              // âm = chi, dương = thu
  type        TransactionType
  timestamp   DateTime         @default(now())
  account     Account          @relation(fields: [accountId], references: [id])
  accountId   String

  keyword     ActionKeyword?   @relation(fields: [keywordId], references: [id])
  keywordId   String?          @db.ObjectId

  @@index([keywordId])         // optional: index cho tìm theo keyword
}

model ActionKeyword {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  phrase    String
  type      TransactionType
  createdAt DateTime         @default(now())

  transactions Transaction[]
}


enum TransactionType {
  income
  expense
}

model ChatLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    Sender   // "user" hoặc "bot"
  message   String   // nội dung tin nhắn
  timestamp DateTime @default(now())
}

enum Sender {
  user
  bot
}

model Plan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  status    PlanStatus @default(TODO)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  data      PlanData[]
}

model PlanData {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  planId  String   @db.ObjectId
  row     Int
  column  Int
  value   String

  plan    Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, row, column])
}

enum PlanStatus {
  TODO
  COMPLETED
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  dueAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}